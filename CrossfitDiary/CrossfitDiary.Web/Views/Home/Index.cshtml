@{
    Layout = "../Shared/_Layout.cshtml";
}
@using CrossfitDiary.Model
@using CrossfitDiary.Web.ViewModels
@using Newtonsoft.Json
@model HomeViewModel


<div class="home-container" style="display: none" data-bind="visible:true">
    
    <div data-bind="visible: _isDataLoading">
        @Html.Partial(MVC.Shared.Views._Spinner)
    </div>


    <div class="row" data-bind="css:{'disabledContent':_isDataLoading}, enabled: !_isDataLoading()">
        <div class="container activities-calendar">
            <div class="row">

                @{
                    foreach (ToLogWorkoutViewModel workout in Model.AllWorkouts)
                    {
                        <div class="col-md-offset-3 col-md-5 done-item">
                            <div class="item-header clearfix">
                                <div class="pull-left">
                                    <span class="user-icon">
                                        <i class="fa fa-user" aria-hidden="true"></i>
                                    </span>
                                    <span>@workout.WorkouterName</span>
                                </div>
                                @if (workout.CanBeRemovedByCurrentUser)
                                {
                                    <div class="pull-right remove-workout" title="Remove your workout" data-bind="click: function(){removeWorkout(@workout.CrossfitterWorkoutId);}">
                                        <a class="pointer">
                                            <i class="fa fa-trash" aria-hidden="true"></i>
                                        </a>
                                    </div>
                                }
                                <div class="pull-right">@workout.DisplayDate</div>
                            </div>
                            <div class="item-body clearfix">
                                <div class="workout-title">
                                    <span>@workout.WorkoutViewModel.WorkoutType</span>
                                    @switch (workout.WorkoutViewModel.WorkoutType)
                                    {
                                        case RoutineComplexType.ForTime:
                                            <span>: @workout.WorkoutViewModel.RoundsCount</span>
                                            <span> rounds</span>
                                            break;
                                        case RoutineComplexType.AMRAP:
                                            <span>: @workout.WorkoutViewModel.TimeToWork</span>
                                            break;
                                        case RoutineComplexType.EMOM:
                                            break;
                                        case RoutineComplexType.E2MOM:
                                        case RoutineComplexType.NotForTime:
                                            break;
                                        default:
                                            throw new ArgumentOutOfRangeException();
                                    }
                                </div>
                                <div class="workout-exercises">
                                    @{
                                        foreach (ExerciseViewModel exerciseViewModel in workout.WorkoutViewModel.ExercisesToDoList)
                                        {
                                            <div class="exercise">
                                                <span>@exerciseViewModel.Title:</span>
                                                @{
                                                    foreach (ExerciseMeasureViewModel measure in exerciseViewModel.ExerciseMeasures)
                                                    {
                                                        if (string.IsNullOrEmpty(@measure.ExerciseMeasureType.MeasureValue))
                                                        {
                                                            continue;
                                                        }
                                                        <span>@measure.ExerciseMeasureType.MeasureValue</span>
                                                        switch (measure.ExerciseMeasureType.MeasureType)
                                                        {
                                                            case MeasureTypeViewModel.Distance:
                                                                break;
                                                            case MeasureTypeViewModel.Count:
                                                                break;
                                                            case MeasureTypeViewModel.Weight:
                                                                <span> kgs</span>
                                                                break;
                                                            case MeasureTypeViewModel.Calories:
                                                                <span> calories</span>
                                                                
                                                                break;
                                                            default:
                                                                throw new ArgumentOutOfRangeException();
                                                        }
                                                    }
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="result">
                                    @switch (workout.WorkoutViewModel.WorkoutType)
                                    {
                                        case RoutineComplexType.ForTime:
                                            <span>Total time: @workout.TimePassed </span>
                                            break;
                                        case RoutineComplexType.AMRAP:
                                            <span>Result rounds: @workout.RoundsFinished @(workout.PartialRepsFinished.HasValue? string.Format("+ {0} partials", workout.PartialRepsFinished.Value) : "")</span>
                                            break;
                                        case RoutineComplexType.EMOM:
                                            break;
                                        case RoutineComplexType.E2MOM:
                                        case RoutineComplexType.NotForTime:
                                            break;
                                    }

                                </div>
                            </div>
                        </div>
                    }

                }
                @if (Model.AllWorkouts.Count == 0)
                {
                    <div class="col-md-offset-3 col-md-5  ">
                        <div class="done-item text-center">
                            <a class="btn btn-success btn-lg" href="@Url.Action(MVC.Crossfitter.ActionNames.ManageWorkout, MVC.Crossfitter.Name)"><i class="fa fa-star" aria-hidden="true"></i> Let's log our first workout? <i class="fa fa-star" aria-hidden="true"></i></a>

                        </div>

                    </div>
                }

            </div>
        </div>
    </div>
</div>


@section Scripts{
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/bootstrap")

    @Scripts.Render("~/bundles/home")
    <script>
        $(function() {
            const path = "@Url.Content("~")";
            const model = new Pages.HomePageController({
                pathToApp: path,
                viewModel: @Html.Raw(JsonConvert.SerializeObject(Model))
            });
            ko.applyBindings(model);
        });
    </script>
}