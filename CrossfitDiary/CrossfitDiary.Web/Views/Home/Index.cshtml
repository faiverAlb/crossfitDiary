@{
    Layout = "../Shared/_Layout.cshtml";
}
@using CrossfitDiary.Model
@using CrossfitDiary.Web.ViewModels
@using CrossfitDiary.Web.ViewModels.Pride
@using Newtonsoft.Json
@model HomeViewModel

<div class="home-container">
    <!--ko if:errorMessager.hasMessage -->
    <div class="alert alert-danger" role="alert" data-bind="visible:true" style="display: none">
        <span data-bind="text: errorMessager.message"></span>
    </div>
    <!-- /ko -->
    <div data-bind="visible:true" style="display: none">
        <div data-bind="visible: isDataLoading">
            @Html.Partial(MVC.Shared.Views._Spinner)
        </div>
    </div>
    <div class="personal-maximums container">
        <div class="row justify-content-md-center">
            @{
                foreach (PersonExerciseMaximumViewModel maximum in Model.PersonMaximums)
                {
                    <div class="col-auto item bg-info text-light rounded px-2 py-1 m-1">
                        <div class="header">
                        </div>
                        <div class="body">
                            @maximum.ExerciseDisplayName : @maximum.MaximumWeight 
                        </div>
                    </div>
                }

            }
        </div>
    </div>
    <div class="activities-list container">
        @{
            foreach (ToLogWorkoutViewModel workout in Model.AllWorkouts)
            {
                <div class="row">
                    <div class="done-item offset-lg-3 col col-lg-5 my-2 px-3 py-2 rounded @(workout.CanBeRemovedByCurrentUser ? "person-workout" : string.Empty)">
                        <div class="item-header d-flex flex-row justify-content-between  ">
                            <div class="user-icon">
                                <span >@workout.WorkouterName</span>
                            </div>
                            <div class="">
                                <span class="">@workout.DisplayDate</span>
                                @if (workout.CanBeRemovedByCurrentUser)
                                {
                                    <a class="remove-workout pl-1 text-secondary pointer" title="Remove your workout" data-bind="click: function(){removeWorkout(@workout.CrossfitterWorkoutId);}">
                                        <i class="fa fa-trash" aria-hidden="true"></i>
                                    </a>
                                }
                            </div>
                        </div>
                        <div class="item-body pt-1">
                            <span class="workout-title">
                                <span>@workout.WorkoutViewModel.WorkoutType</span>
                                @switch (workout.WorkoutViewModel.WorkoutType)
                                {
                                    case RoutineComplexType.ForTime:
                                        <span>: @workout.WorkoutViewModel.RoundsCount</span>
                                        <span> rounds</span>
                                        break;
                                    case RoutineComplexType.AMRAP:
                                        <span>: @workout.WorkoutViewModel.TimeToWork</span>
                                        break;
                                    case RoutineComplexType.EMOM:
                                        break;
                                    case RoutineComplexType.E2MOM:
                                    case RoutineComplexType.NotForTime:
                                        break;
                                    default:
                                        throw new ArgumentOutOfRangeException();
                                }
                            </span>
                            <div class="workout-exercises pl-3 pt-1">
                                @{
                                    foreach (ExerciseViewModel exerciseViewModel in workout.WorkoutViewModel.ExercisesToDoList)
                                    {
                                        <div class="exercise">
                                            <span>@exerciseViewModel.Title:</span>
                                            @{
                                                foreach (ExerciseMeasureViewModel measure in exerciseViewModel.ExerciseMeasures)
                                                {
                                                    if (string.IsNullOrEmpty(@measure.ExerciseMeasureType.MeasureValue))
                                                    {
                                                        continue;
                                                    }

                                                    switch (measure.ExerciseMeasureType.MeasureType)
                                                    {
                                                        case MeasureTypeViewModel.Distance:
                                                            <span>@measure.ExerciseMeasureType.MeasureValue meters</span>
                                                            break;
                                                        case MeasureTypeViewModel.Count:
                                                            <span>@measure.ExerciseMeasureType.MeasureValue</span>
                                                            break;
                                                        case MeasureTypeViewModel.Weight:
                                                            <span>(@measure.ExerciseMeasureType.MeasureValue kgs)</span>
                                                            break;
                                                        case MeasureTypeViewModel.Calories:
                                                            <span>(@measure.ExerciseMeasureType.MeasureValue calories)</span>
                                                            break;
                                                        default:
                                                            throw new ArgumentOutOfRangeException();
                                                    }
                                                }

                                            }
                                        </div>
                                    }

                                }
                            </div>
                            <div class="text-right">
                                <span class="workout-result">

                                    @switch (workout.WorkoutViewModel.WorkoutType)
                                    {
                                        case RoutineComplexType.ForTime:
                                            <span><i class="far fa-clock"></i> Total time: @workout.TimePassed</span>
                                            break;
                                        case RoutineComplexType.AMRAP:
                                            <span><i class="fas fa-hashtag"></i> Result rounds: @workout.RoundsFinished @(workout.PartialRepsFinished.HasValue ? string.Format("+ {0} partials", workout.PartialRepsFinished.Value) : string.Empty)</span>
                                            break;
                                        case RoutineComplexType.EMOM:
                                        case RoutineComplexType.E2MOM:
                                            <span><i class="far fa-clock"></i> Work time: @workout.WorkoutViewModel.TimeToWork </span>
                                            break;
                                        case RoutineComplexType.NotForTime:
                                            break;
                                    }
                                </span>
                            </div>
                        </div>
                        <div class="item-footer text-right pt-1">
                            <div class="action-buttons">
                                @if (workout.CanBeRemovedByCurrentUser)
                                {
                                    <a class="edit-workout-action pointer text-info" title="Edit" href="@Url.Action(MVC.Crossfitter.ActionNames.ManageWorkout, MVC.Crossfitter.Name, new {workoutId = workout.WorkoutViewModel.Id, crossfitterWorkoutId = workout.CrossfitterWorkoutId})"><i class="fas fa-edit "></i></a>
                                }
                                <a class="repeat-workout-action pointer text-success pl-1" title="Repeat" href="@Url.Action(MVC.Crossfitter.ActionNames.ManageWorkout, MVC.Crossfitter.Name, new {workoutId = workout.WorkoutViewModel.Id})"><i class="fas fa-plus "></i></a>

                            </div>
                        </div>
                    </div>
                </div>
            }

        }
        @if (Model.AllWorkouts.Count == 0)
        {
            <div class="row">
                <div class="done-item offset-lg-3 col col-lg-5 my-2 px-3 py-2 rounded text-center">
                    <a class="btn btn-success btn-lg btn-block" href="@Url.Action(MVC.Crossfitter.ActionNames.ManageWorkout, MVC.Crossfitter.Name)"><i class="fa fa-star" aria-hidden="true"></i> Let's log our first workout? </a>
                </div>
            </div>

        }

    </div>
</div>

@section styles{
    @Styles.Render("~/Content/home")
}

@section Scripts{
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/bootstrap")

    @Scripts.Render("~/bundles/home")
    <script>
        $(function() {
            const path = "@Url.Content("~")";
            const model = new Pages.HomePageController({
                pathToApp: path,
                viewModel: @Html.Raw(JsonConvert.SerializeObject(Model))
            });
            ko.applyBindings(model);
        });
    </script>
}

