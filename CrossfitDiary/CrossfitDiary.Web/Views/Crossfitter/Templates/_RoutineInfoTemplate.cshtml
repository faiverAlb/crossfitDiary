<script type="text/html" id="routine-info-template">
    <div class="routine-complex-info">
        <div class="panel panel-info">
            <div class="panel-heading">General workout info</div>
            <div class="panel-body">
                <div data-bind="if: isReadOnlyMode">
                    <form class="">
                        <!--ko if: canSeeRoundsCount-->
                        <div>
                            <label>Rounds count:</label>
                            <label data-bind="text: roundsCount"></label>
                        </div>
                        <!-- /ko -->
                        <!--ko if: canSeeTimeToWork-->
                        <div>
                            <label>Time to work:</label>
                            <label data-bind="text: timeToWork"></label>
                        </div>
                        <!-- /ko -->
                    </form>
                    <div>
                        <label for="complexRoutineTitleInput">Title:</label>
                        <label data-bind="text: title"></label>
                    </div>
                    <!--ko if: restBetweenExercises-->
                    <div>
                        <label>Rest between exercises:</label>
                        <label data-bind="text: restBetweenExercises"></label>
                    </div>
                    <!-- /ko -->
                    <!--ko if: restBetweenRounds-->
                    <div>
                        <label for="restRoundsInput">Rest between rounds:</label>
                        <label data-bind="text: restBetweenRounds"></label>
                    </div>
                    <!-- /ko -->
                </div>
                <div data-bind="ifnot: isReadOnlyMode">
                    <form class="form-inline main-group">
                        <div class="form-group" data-bind="if: canSeeRoundsCount, validationElement: roundsCount">
                            <label for="roundsInput">Rounds count</label>
                            <input type="number" min="1" class="form-control" id="roundsInput" placeholder="Rounds count" data-bind="value: roundsCount, valueUpdate: 'afterkeydown'">
                        </div>
                        <div class="form-group" data-bind="if: canSeeTimeToWork, validationElement: timeToWork">
                            <label for="timeInput">Time to work</label>
                            <input type="text" class="form-control" id="timeInput" placeholder="Time to work" data-bind="inputmask:{value: timeToWork, mask:'99:59',definitions: { '5': { validator: '[0-5]' } }}">
                        </div>
                        <div class="form-group">
                            <a href="#" data-toggle="collapse" data-target="#optionsPanel">+ show more options</a>
                        </div>
                    </form>
                    <form class="form-inline collapse" id="optionsPanel">
                        <div class="form-group">
                            <label for="complexRoutineTitleInput">Title</label>
                            <input type="text" class="form-control" id="complexRoutineTitleInput" placeholder="Title" data-bind="value: title">
                        </div>
                        <div class="form-group">
                            <label for="restExercisesInput">Rest between exercises</label>
                            <input type="text" class="form-control" id="restExercisesInput" placeholder="Rest between exercises" data-bind="inputmask:{value: restBetweenExercises, mask:'99:59',definitions: { '5': { validator: '[0-5]' } }}">
                        </div>
                        <div class="form-group">
                            <label for="restRoundsInput">Rest between rounds</label>
                            <input type="text" class="form-control" id="restRoundsInput" placeholder="Rest between rounds" data-bind="inputmask:{value: restBetweenRounds, mask:'99:59',definitions: { '5': { validator: '[0-5]' } }}">
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div data-bind="ifnot: isReadOnlyMode">
        <select class="form-control exercise-selector" data-live-search="true" data-bind="options:exercises, optionsText:'title',value: selectedExercise, optionsCaption: 'Choose an exercise...',selectPicker: {}"></select>
    </div>
    <div class="selected-workout-type">
        <div class="text-center" data-bind="text:selectedWorkoutType().text"></div>
    </div>
    <div class="routines-container">
        <!-- ko foreach:simpleRoutines-->
        <!-- ko ifnot: exercise.isAlternative -->
        @{ Html.RenderPartial(MVC.Crossfitter.Views.Templates._SimpleRoutineItemTemlate); }
        <!-- /ko -->
        <!-- /ko -->
        <!-- ko ifnot: anyUsualExercises -->
        <div class="simple-routine-item text-center no-selected-container">
            No exercises selected
        </div>
        <!-- /ko -->
    </div>

    <div>
        <div data-bind="if:canSeeAlternativeExercises">
            <div class="text-center selected-workout-type">Alternative</div>
            <div data-bind="ifnot: isReadOnlyMode">
                <select class="form-control exercise-selector" data-live-search="true" data-bind="options:alternativeExercises, optionsText:'title',value: selectedAlternativeExercise, optionsCaption: 'Choose an alternative exercise...',selectPicker: {}"></select>
            </div>
        </div>
    </div>

    <div class="routines-container" data-bind="if:canSeeAlternativeExercises">
        <!-- ko foreach:simpleRoutines-->
        <!-- ko if: exercise.isAlternative -->
        @{ Html.RenderPartial(MVC.Crossfitter.Views.Templates._SimpleRoutineItemTemlate); }
        <!-- /ko -->
        <!-- /ko -->
        <!-- ko ifnot: anyAlternative-->
        <div class="simple-routine-item text-center no-selected-container">
            No alternative exercises selected
        </div>
        <!-- /ko -->
    </div>

</script>